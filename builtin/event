(IMPORT (file "protocol")
  | $order
  | order)

(IMPORT (file "monad")
  | CHAIN)

(IMPORT (file "task")
  | Task
  | concurrent-null
  | reply)

(IMPORT (file "null")
  | Null
  | *null)

(IMPORT (file "integer")
  (IMPLEMENT ($order Integer Integer)
    | order))

(IMPORT (file "maybe")
  | Maybe
  | *some
  | *none)

(IMPORT (file "boolean")
  | IF
  | not
  | *true)

(IMPORT (file "order")
  | more-or-equal?)

(IMPORT (file "time")
  | current-time)


(TYPE (Events a)
  | (*events (-> (-> a (Task Null)) (Task Null))))

(FUNCTION receive :: (-> (Events a) (-> a (Task Null)) (Task Null))
  (receive (*events a) b)
    (a b))

(FUNCTION merge :: (-> (Events a) (Events a) (Events a))
  (merge a b)
    (*events -> send
      (concurrent-null
        [ (receive a send)
        | (receive b send) ])))

(FUNCTION transform-maybe :: (-> (Events a) (-> a (Maybe b)) (Events b))
  (transform-maybe e f)
    (*events -> send
      (receive e -> a
        (MATCH (f a)
          (*some a)
            (send a)
          *none
            (reply *null)))))

(FUNCTION transform :: (-> (Events a) (-> a b) (Events b))
  (transform e f)
    (transform-maybe e -> a
      (*some (f a))))

(FUNCTION concat :: (-> (Events a) (Events a) (Events a))
  (concat a b)
    (*events -> send
      (CHAIN
        (receive a send)
        (receive b send))))

(FUNCTION over-threshold? :: (-> Integer (Maybe Integer) Boolean)
  (over-threshold? time (*some threshold))
    (more-or-equal? time threshold)

  (over-threshold? _ *none)
    *true)

(FUNCTION throttle :: (-> Integer (Events a) (Events a))
  (throttle delay events)
    (*events -> send
      (CHAIN
        old <= (make-mutable *none)
        (receive events -> a
          (CHAIN
            time <= current-time
            threshold <= (get old)
            (IF (over-threshold? time threshold)
              (CHAIN
                (set! old (*some (+ time delay)))
                (send a))
              (reply *null)))))))

(DEFINE
  | empty :: (Events a)
  | empty <= (*events -> _
               (reply *null)))

(FUNCTION reply :: (-> a (Events a))
  (reply a)
    (*events -> send
      (send a)))


(EXPORT
  | Events
  | receive
  | merge
  | transform-maybe
  | transform
  | concat
  | empty
  | reply)

(EXPORT-DEFINE
  | make-events <= *events)
