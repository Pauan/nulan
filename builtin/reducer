(ATTRIBUTES { public }
  (TYPE (Step state value)
    *done
    (*state state)
    (*value state value)))


(ATTRIBUTES { public }
  (TYPE (Stream a)
    (*stream (-> (-> b (-> b
                         (Task (Step b a)))
                   (Task c))
               (Task c)))))


(ATTRIBUTES { public inline }
  (FUNCTION with-stream :: (-> (Stream a) (-> b (-> b
                                                  (Task (Step b a)))
                                            (Task c))
                             (Task c))
    [ (*stream a) b ]
    : (a b)))


(ATTRIBUTES { public inline }
  (FUNCTION make-stream :: (-> (-> (-> b (-> b
                                           (Task (Step b a)))
                                     (Task c))
                                 (Task c))
                             (Stream a))
    [ a ]
    : (*stream a)))


(ATTRIBUTES { public }
  (FUNCTION reduce-left :: (-> a (Stream b) (-> a b (Task a)) (Task a))
    [ init a f ]
    : (with-stream a -> state next
        (LOOP loop
          init <= init
          state <= state
          (CHAIN-MATCH (next state)
            | *done
            : (<< init)

            | (*state state)
            : (loop init state)

            | (*value state value)
            : (CHAIN
                init <= (f init value)
                (loop init state)))))))


(ATTRIBUTES { public inline }
  (FUNCTION each :: (-> (Stream a) (-> a (Task Null)) (Task Null))
    [ a f ]
    : (reduce-left *null a -> _ new
        (f new))))


(ATTRIBUTES { public }
  (FUNCTION accumulate :: (-> a (Stream b) (-> a b (Task (Step a c))) (Stream c))
    [ init a f ]
    : (make-stream -> push
        (with-stream a -> state next
          (push (*pair init state) -> (*pair init state)
            (CHAIN-MATCH (next state)
              | *done
              : (<< *done)

              | (*state state)
              : (<< (*state (*pair init state)))

              | (*value state value)
              : (CHAIN-MATCH (f init value)
                  | *done
                  : (<< *done)

                  | (*state init)
                  : (<< (*state (*pair init state)))

                  | (*value init value)
                  : (<< (*value (*pair init state) value)))))))))


(ATTRIBUTES { inline }
  (FUNCTION transform-stream :: (-> (Stream a) (-> (Step b a) (Task (Step b c))) (Stream c))
    [ a f ]
    : (make-stream -> push
        (with-stream a -> state next
          (push state -> state
            (CHAIN
              a <= (next state)
              (f a)))))))


(ATTRIBUTES { public }
  (FUNCTION transform-maybe :: (-> (Stream a) (-> a (Maybe b)) (Stream b))
    [ a f ]
    : (transform-stream a -> a
        (MATCH a
          | (*value state value)
          : (MATCH (f value)
              | *none
              : (<< (*state state))

              | (*some value)
              : (<< (*value state value)))

          | a
          : (<< a)))))


(ATTRIBUTES { public }
  (FUNCTION transform-until :: (-> (Stream a) (-> a (Maybe b)) (Stream b))
    [ a f ]
    : (transform-stream a -> a
        (MATCH a
          | (*value state value)
          : (MATCH (f value)
              | *none
              # TODO stop pulling after it returns *none
              : (<< *done)

              | (*some value)
              : (<< (*value state value)))

          | a
          : (<< a)))))


(FUNCTION with-stream :: (-> (Stream a) (-> (Task (Maybe a)) (Task b)) (Task b))
  [ a f ]
  : (with-stream a -> state next
      (LOOP loop
        state <= state
        |
        : )))


(ATTRIBUTES { public }
  # TODO only initialize the second stream when the first stream has finished
  (FUNCTION concat :: (-> (Stream a) (Stream a) (Stream a))
    [ a b ]
    : (make-stream -> push
        (with-stream a -> state1 next1
          (with-stream b -> state2 next2
            (push (*left state1) -> state
              (MATCH state
                | (*left state)
                : (CHAIN-MATCH (next1 state)
                    | *done
                    : (<< (*state (*right state2)))

                    | (*state state)
                    : (<< (*state (*left state)))

                    | (*value state value)
                    : (<< (*value (*left state) value)))

                | (*right state)
                : (CHAIN-MATCH (next2 state)
                    | *done
                    : (<< *done)

                    | (*state state)
                    : (<< (*state (*right state)))

                    | (*value state value)
                    : (<< (*value (*right state) value))))))))))


(TYPE (Either-Pair a b)
  (*left a)
  (*right b)
  (*both a b))


(ATTRIBUTES { public }
  (FUNCTION zip-either :: (-> (Stream a) (Stream b) (Stream (Either-Pair a b)))
    [ a b ]
    : (make-stream -> push
        (with-stream a -> state1 next1
          (with-stream b -> state2 next2
            (push (*pair (*state state1) (*some state2)) -> state
              (MATCH state
                | (*pair *done *none)
                : (<< *done)

                | (*pair *done (*some state2))
                : (CHAIN-MATCH (next2 state2)
                    | *done
                    : (<< (*state (*pair *done *none)))

                    | (*state state2)
                    : (<< (*state (*pair *done (*some state2))))

                    | (*value state2 value2)
                    : (<< (*value (*pair *done (*some state2)) (*right value2))))

                | (*pair (*state state1) *none)
                : (CHAIN-MATCH (next1 state1)
                    | *done
                    : (<< (*state (*pair *done *none)))

                    | (*state state1)
                    : (<< (*state (*pair (*state state1) *none)))

                    | (*value state1 value1)
                    : (<< (*value (*pair (*state state1) *none) (*left value1))))

                | (*pair (*state state1) (*some state2))
                : (CHAIN-MATCH (next1 state1)
                    | *done
                    : (<< (*state (*pair *done (*some state2))))

                    | (*state state1)
                    : (<< (*state (*pair (*state state1) (*some state2))))

                    | (*value state1 value1)
                    : (<< (*state (*pair (*value state1 value1) (*some state2)))))

                | (*pair (*value state1 value1) *none)
                : (<< (*value (*pair (*state state1) *none) (*left value1)))

                | (*pair (*value state1 value1) (*some state2))
                : (CHAIN-MATCH (next2 state2)
                    | *done
                    : (<< (*state (*pair (*value state1 value1) *none)))

                    | (*state state2)
                    : (<< (*state (*pair (*value state1 value1) (*some state2))))

                    | (*value state2 value2)
                    : (<< (*value (*pair (*state state1) (*some state2)) (*both value1 value2)))))))))))


(ATTRIBUTES { public }
  (FUNCTION zip :: (-> (Stream a) (Stream b) (Stream (Pair a b)))
    [ a b ]
    : (transform-until (zip-either a b) -> a
        (MATCH a
          | (*both a b)
          : (*some (*pair a b))

          | _
          : *none))))



(TYPE (Step value state)
  | *done
  | (*skip state)
  | (*value value state))

(TYPE (Reducer a)
  (*reducer (-> b (-> b (Task (Step a b))) (Task b))))

(PROTOCOL ($reducer-from a)
  | reducer-from :: (INLINE (-> (a b) (Reducer m b))))

(PROTOCOL ($from-reducer a)
  | from-reducer :: (INLINE (-> (Reducer m b) (a b))))

(REWRITE-RULE
  (REDUCER-FROM &(FROM-REDUCER ~a))
    a
  (REDUCER-FROM a)
    &(reducer-from ~a)

  (FROM-REDUCER &(REDUCER-FROM ~a))
    a
  (FROM-REDUCER a)
    &(from-reducer ~a))

(REWRITE-RULE
  (TRANSFORM-REDUCER a @body)
    (WITH-UNIQUE initial next state
      &(MATCH (reducer-from ~a)
         (*reducer ~initial ~next)
           (FROM-REDUCER
             (*reducer ~initial -> ~state
               (MATCH (~next ~state)
                 ~@body))))))

(FUNCTION transform-maybe :: (INLINE
                               (REQUIRE ($reducer-from a) ($from-reducer a)
                                 (-> (a b) (-> b (Maybe c)) (a c))))
  (transform-maybe a f)
    (TRANSFORM-REDUCER a
      *done
        *done

      (*skip state)
        (*skip state)

      (*value value state)
        (MATCH (f value)
          *none
            (*skip state)

          (*some value)
            (*value value state))))

(FUNCTION transform :: (INLINE
                         (REQUIRE ($reducer-from a) ($from-reducer a)
                           (-> (a b) (-> b c) (a c))))
  (transform a b)
    (transform-maybe a -> c
      (*some (b c))))

(FUNCTION reduce-left :: (INLINE
                           (REQUIRE ($reducer-from a)
                             (-> b (a c) (-> b c b) b)))
  (reduce-left initial a f)
    (MATCH (REDUCER-FROM a)
      (*reducer state next)
        (LOOP initial <= initial
              state <= state
          (MATCH (next state)
            *done
              initial

            (*skip state)
              (loop initial state)

            (*value value state)
              (loop (f initial value) state)))))

(FUNCTION concat :: (INLINE
                      (REQUIRE ($reducer-from a) ($from-reducer a)
                        (-> (a b) (a b) (a b))))
  (concat a b)
    (MATCH (REDUCER-FROM a)
      (*reducer state1 next1)
        (MATCH (REDUCER-FROM b)
          (*reducer state2 next2)
            (FROM-REDUCER
              (*reducer (*left state1) -> state
                (MATCH state
                  (*left state)
                    (MATCH (next1 state)
                      *done
                        (*skip (*right state2))

                      (*skip state)
                        (*skip (*left state))

                      (*value value state)
                        (*value value (*left state)))

                  (*right state)
                    (MATCH (next2 state)
                      *done
                        *done

                      (*skip state)
                        (*skip (*right state))

                      (*value value state)
                        (*value value (*right state)))))))))
