(IMPORT (nulan "unsafe")
  | UNSAFE-FFI-LOAD)

(IMPORT (nulan "target")
  | WITH-TARGET
  | javascript)

(DEFINE-TYPE (Task a))

(PROTOCOL ($task<< a)
  task<< :: (-> (a b) (Task b)))

(WITH-TARGET javascript
  (UNSAFE-FFI-LOAD "../ffi/task.js"
    | reply         :: (-> a (Task a))
    | transform     :: (-> (Task a) (-> a b) (Task b))
    | flatten       :: (-> (Task (Task a)) (Task a))
    | concurrent    :: (-> (List (Task a)) (Task (List a)))
    | transform2    :: (-> (Task a) (Task b) (-> a b c) (Task c))
    | fastest       :: (-> (Task a) (Task a) (Task a))
    | wait          :: (-> Integer (Task Null))
    | log           :: (-> Text (Task Null))
    | with_resource :: (-> (Task a)
                           (-> a (Task b))
                           (-> a (Task Null))
                           (Task b))))

(stream -> push!
  (with-resource (open-file "foo" "r")
    (-> fd
      (CHAIN-MATCH (read fd)
        *none
          (reply null)
        (*some x)
          (push! x)))
    close-file))

(DEFINE-ALIAS
  (WITH-RESOURCE &(~n = ~v) use close)
    &(with_resource ~v
       (-> ~n ~use)
       (-> ~n ~close)))

(FUNCTION timeout :: (-> (Task a) Integer (Task (Maybe a)))
  (timeout task ms)
    (fastest
      (transform task *some)
      (transform (wait ms) -> _ *none)))

(DEFINE-GROUP (Result a)
  (*value a)
  (*error Error))

(DEFINE result :: (-> (Task a) (Task (Result a)))
  (result a)
    (on_error a *value *error))


(EXPORT
  | Task
  | transform
  | flatten
  | reply
  | concurrent
  | fastest
  | wait
  | log
  | timeout)



(WITH-RESOURCE fd = (open-file "foo")
  (read fd)
  (close-file fd))

(CHAIN
  fd = (open-file "foo")
  (finally
    (read fd)
    (close-file fd)))

a = (Task a)
b = (Task b)
c = (Task Null)

Cancel a -> Run c
Error a -> Error a
Success a -> Run b

Cancel b -> Run c
Error b -> Run c -> Error b
Success b -> Run c -> Success b

Cancel c ->
Error c -> Error c
Success c -> Success b
