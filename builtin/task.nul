(IMPORT (file "protocol.nul")
  | $transform
  | $flatten
  | $wrap
  | _transform = transform
  | _flatten = flatten
  | _wrap = wrap)

(DEFINE-TYPE (Task a))

(UNSAFE-FFI-IMPORT (file "../ffi/task.js")
  wrap          :: (-> a (Task a))
  transform     :: (-> (Task a) (-> a b) (Task b))
  flatten       :: (-> (Task (Task a)) (Task a))
  concurrent    :: (-> (List (Task a)) (Task (List a)))
  fastest       :: (-> (Task a) (Task a) (Task a))
  delay         :: (-> Integer (Task Null))
  log           :: (-> String (Task Null))
  with_resource :: (-> (Task a)
                       (-> a (Task b))
                       (-> a (Task Null))
                       (Task b)))

(stream -> push!
  (with-resource (open-file "foo" "r")
    (-> fd
      (DO-MATCH (read fd)
        *none
          (wrap *null)
        (*some x)
          (push! x)))
    close-file))


(IMPLEMENT ($wrap Task)
  (_wrap a fn)
    (wrap a fn))

(IMPLEMENT ($transform Task)
  (_transform a fn)
    (transform a fn))

(IMPLEMENT ($flatten Task)
  (_flatten a)
    (flatten a))

(DEFINE-ALIAS
  (WITH-RESOURCE &(~n = ~v) use close)
    &(with_resource ~v
       (-> ~n ~use)
       (-> ~n ~close)))

(DEFINE timeout :: (-> (Task a) Integer (Task (Maybe a)))
  (timeout task ms)
    (fastest
      (transform task *some)
      (transform (delay ms) -> _ *none)))

(DEFINE-GROUP (Result a)
  (*value a)
  (*error Error))

(DEFINE result :: (-> (Task a) (Task (Result a)))
  (result a)
    (on_error a *value *error))


(EXPORT
  | Task
  | ($transform Task)
  | ($flatten Task)
  | ($wrap Task)
  | concurrent
  | fastest
  | delay
  | log
  | timeout)



(WITH-RESOURCE fd = (open-file "foo")
  (read fd)
  (close-file fd))

(DO fd = (open-file "foo")
    (finally
      (read fd)
      (close-file fd)))

a = (Task a)
b = (Task b)
c = (Task Null)

Cancel a -> Run c
Error a -> Error a
Success a -> Run b

Cancel b -> Run c
Error b -> Run c -> Error b
Success b -> Run c -> Success b

Cancel c ->
Error c -> Error c
Success c -> Success b
