(IMPORT (nulan "unsafe/ffi")
  UNSAFE-FFI-LOAD
  javascript)

(IMPORT (file "null")
  Null)

(IMPORT (file "protocol")
  $transform
  transform

  $chain
  chain

  $reply
  reply

  $reduce-left
  reduce-left)

(IMPORT (file "list")
  List)


(REWRITE-RULE
  # TODO what if a is not Null ?
  (CHAIN (reply ,a) ,b)
  = b

  (CHAIN ,a <= (reply ,b) ,c)
  = &(LOCAL ,a <= ,b ,c)

  #(CHAIN ,a <= (CHAIN ,@b ,c) ,d)
  #= &(CHAIN ,@b ,a <= ,c ,d)

  #(CHAIN ,a <= ,b (reply ,c))
  #= &(transform ,b -> ,a ,c)

  (CHAIN ,a <= ,b ,c)
  = &(chain ,b -> ,a ,c)

  #(CHAIN ,a (reply ,b))
  #= &(transform ,a -> _ :: Null ,b)

  (CHAIN ,a ,b)
  = &(CHAIN _ :: Null <= ,a ,b)

  (CHAIN ,a ,@b)
  = &(CHAIN ,a (CHAIN ,@b)))


(REWRITE-RULE
  (CHAIN-MATCH ,a ,@b)
  = (WITH-UNIQUE c
      &(CHAIN
         ,c <= ,a
         (MATCH ,c ,@b))))


(REWRITE-RULE
  (CHAIN-RESULT ~a <= ~b ~c)
  = (WITH-UNIQUE d
      &(CHAIN-MATCH ~b
         (*success ~a)
         = ~c

         ~d
         = (reply ~d)))

  (CHAIN-RESULT ~a ~b)
  = &(CHAIN-RESULT _ :: Null <= ~a ~b)

  (CHAIN-RESULT ~a ~@b)
  = &(CHAIN-RESULT ~a (CHAIN-RESULT ~@b)))


(REWRITE-RULE
  (CHAIN-IF ,test
    ,then
    ,else)
  = (WITH-UNIQUE a
      &(CHAIN
         ,a <= ,test
         (IF ,a
           ,then
           ,else))))


(UNSAFE-FFI-LOAD { target <= javascript
                   file <= "../ffi/monad.js" }
  sequential :: (REQUIRE ($chain a) ($reply a)
                  (-> (List (a b)) (a (List b))))
  sequential_null :: (REQUIRE ($chain a) ($reply a)
                       (-> (List (a Null)) (a Null))))


(FUNCTION each :: (REQUIRE ($chain a) ($reply a)
                    (-> (List b) (-> b (a Null)) (a Null)))
  (each a b)
  = (sequential_null (transform a b)))


(EXPORT
  sequential
  sequential-null <= sequential_null
  each
  CHAIN
  CHAIN-MATCH
  CHAIN-IF)




# TODO is this correct ?
# TODO can this be made more efficient ?
(FUNCTION sequential :: (REQUIRE ($chain a) ($reply a)
                          (-> (List (a b)) (a (List b))))
  (sequential a)
    (reduce-left (reply []) a -> a b
      (CHAIN
        a <= a
        b <= b
        (reply (push a b)))))


(UNSAFE-FFI-IMPORT { target <= javascript
                     file <= "../ffi/chain.js" }
  sequential_null :: (REQUIRE ($chain a) ($reply a)
                       (-> (List (a Null)) (a Null)))
  reduce_left_chain :: (REQUIRE ($chain a) ($reply a)
                         (-> b (List c) (-> b c (a b)) (a b))))


(EXPORT
  sequential
  sequential-null <= sequential_null
  reduce-left-chain <= reduce_left_chain)
