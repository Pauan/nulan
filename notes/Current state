(TYPE Color
  *red
  *orange
  *yellow
  *green
  *blue
  *indigo
  *violet)

(TYPE Rgb
  (*rgba Integer Integer Integer Number))

(RECORD-TYPE Rbga
  { red :: Integer
    blue :: Integer
    green :: Integer
    alpha :: Number })

(MATCH foo
  | (*rgba { red blue green alpha })
  : (*rgba { red blue green alpha })

  | (*rgba { red blue green alpha })
  : b)

(TYPE (List a)
  *empty
  (*value a (List a)))

(TYPE Foo
  (FORALL a
    (*foo %(Bar a) a)))


(PROTOCOL (Flatten a)
  flatten :: (-> (a (a b)) (a b)))


(LET state-monad :: (-> a Type)
  | value
  : (FORALL a
      (State a value)))

(FORALL a
  (LET-RECORD %flatten-state :: (Flatten (=> value (State a value)))
    (LET flatten :: (-> (State (State a value)) (State a value))
      ...)))


(PROTOCOL (Transform a)
  transform :: (-> %(Foo a) (a b) (-> b c) (a c)))


(LET step :: (IMPLICIT a b c
               (REQUIRE ($transform a) ($flatten a)
                 (-> (a b) (-> b (a c)) (a c))))
  | a fn
  : (flatten (transform a fn)))

(MEMOIZE-GLOBAL
  (FORALL a
    (LET %eq-array :: (-> %(Eq a) (Eq (Array a)))
      | %{ eq }
      : { (LET eq :: (-> (Array a) (Array a) Bool)
            | a b
            : ...) })))

(IMPORT (github "nulan/flatten" "v2.0.0" "package.nul"))

(IMPORT (github "nulan/nulan-standard" "v2.0.0" "unsafe/package.nul"))

(IMPORT (github "nulan/nulan-nodejs" "v2.0.0" "package.nul"))
(IMPORT (github "nulan/nulan-browser" "v2.0.0" "package.nul"))

(IMPORT (local "foo.nul"))

(IMPORT (local "flatten/foo.nul"))

(IMPORT (local "flatten/module/flatten.nul")
  $flatten
  flatten)

(IMPORT (local "flatten/foo.nul")
  transform-maybe)

(LOCAL-IMPORT (local "flatten/foo.nul")
  (transform ...))

(LOCAL-IMPORT (local "flatten/foo.nul")
  transform <= map
  (transform ...))

(LOCAL-IMPORT (local "flatten/foo.nul")
  transform-maybe
  (transform ...))

(LET maybe-transform :: (-> ...)
  (LOCAL-IMPORT (local "flatten/foo.nul")
    transform-maybe
    transform))

(LET %transform-maybe :: (Transform Maybe)
  { transform <= map })

(LET %transform-maybe :: (Transform Maybe)
  { transform <=
      (GROUP
        | a b
        : ...) })

(LET-RECORD %transform-maybe :: (Transform Maybe)
  (LET transform :: (-> (Maybe a) (-> a b) (Maybe b))
    | a b
    : (map a b)))


{ (LET transform :: (-> (Maybe a) (-> a b) (Maybe b))
    | *none _
    : *none

    | (*some a) f
    : (*some (f a))) }


(LET transform-maybe :: (Transform Maybe)
  { transform <=
      (GROUP
        | a f
        : (MATCH a
            | *none
            : *none

            | (*some a)
            : (*some (f a)))) })


(PROTOCOL (Transform a)
  transform :: (-> (a b) (-> b c) (a c)))

(LET foo :: (-> %(Transform a) a b c)
  | %{ transform } a b
  : (transform a b c))

(LET foo :: (-> %(Transform a) a b c)
  | %m a b
  : (m.transform a b c))


(RECORD-TYPE (Transform a)
  { transform :: (-> (a b) (-> b c) (a c)) })

(LET-RECORD %transform-maybe :: (Transform Maybe)
  (LET transform :: (-> (Maybe a) (-> a b) (Maybe b))
    | *none _
    : *none

    | (*some a) f
    : (*some (f a))))

(LET foo :: (-> %(Transform a) a b c)
  | %m a b
  : (m.transform a b c))


(PROTOCOL (Transform a)
  transform :: (-> (a b) (-> b c) (a c)))

(LET-RECORD %transform-maybe :: (Transform Maybe)
  (LET transform :: (-> (Maybe a) (-> a b) (Maybe b))
    | *none _
    : *none

    | (*some a) f
    : (*some (f a))))


(RECORD-TYPE (Transform a)
  { transform :: (-> (a b) (-> b c) (a c)) })

(LET-RECORD %transform-maybe :: (Transform Maybe)
  (LET transform :: (-> (Maybe a) (-> a b) (Maybe b))
    | *none _
    : *none

    | (*some a) f
    : (*some (f a))))

(LET foo :: (-> %(Transform a) a b c)
  | %{ transform } a b
  : (transform a b c))

(LET foo :: (-> %(Transform a) a b c)
  | %m a b
  : (m.transform a b c))

(LOCAL
  %m <= { transform <= ... }
  (foo 1 2))


(TYPE-ALIAS (Transform a b c)
  (-> (a b) (-> b c) (a c)))

(LET transform-maybe :: (-> (Maybe a) (-> a b) (Maybe b))
  | *none _
  : *none

  | (*some a) f
  : (*some (f a)))

(LET foo :: (-> %(Transform a b c) a b c)
  | %transform a b
  : (transform a b c))


(LET foo :: (REQUIRE ($transform a)
              (-> a b c))
  | a b
  : (transform a b c))


(USE "local:foo/bar.nul"
  a <= d
  b
  c
  Maybe
  *some
  *none)

(LOCAL-PROVIDE ($flatten Maybe)
  (LET flatten :: (-> ...)
    (-> ...))
  (flatten ...))

(LOCAL-PROVIDE ($flatten Maybe)
  (LET flatten :: (-> ...)
    | a b
    : ...)
  (flatten ...))

(IF test
  then
  else)

(UNSAFE-FFI-USE { target <= javascript
                  file <= "local:ffi/foo/bar.js" }
  a :: (-> Integer Integer Integer)
  b :: Integer
  c :: Integer
  d :: (Foo Integer))

(PROTOCOL ($<< a b)
  << :: (-> a b))

(PROVIDE $<<
  (LET << :: (IMPLICIT a
               (-> a Foo))
    | a
    : ...))

(PROVIDE $<<
  (LET << :: (IMPLICIT a
               (-> Foo a))
    | a
    : ...))

(TYPE (Result a b)
  (*success a)
  (*failure b))

(PROTOCOL ($result<< a b c)
  result<< :: (-> a (Result b c)))

(PROVIDE $result<<
  (LET result<< :: (IMPLICIT a b
                     (REQUIRE ($<< a b)
                       (-> a (Result b Never))))
    | a
    : (*success (<< a))))

(PROVIDE $<<
  (LET << :: (IMPLICIT
               (REQUIRE ($result<< a b c)
                 (-> a (Result b c))))
    | a
    : (result<< a)))

(PROVIDE $<<
  (LET << :: (IMPLICIT a
               (-> (Result a _) (Maybe a)))
    | (*success a)
    : (*some a)

    | (*failure _)
    : *none))

(PROVIDE $<<
  (LET << :: (IMPLICIT a
               (-> (Maybe a) (Result a Null)))
    | (*some a)
    : (*success a)

    | *none
    : (*failure *null)))

(LET maybe<< :: (IMPLICIT a b
                  (REQUIRE ($result<< a b _)
                    (-> a (Maybe b))))
  | a
  : (<< (<< a)))

(PROVIDE $<<
  (LET << :: (IMPLICIT a b
               (REQUIRE ($result<< a b _)
                 (-> a (Maybe b))))
    | a
    : (<< (<< a))))

(<< 5)

(result<< 5)

(maybe<< 5)

(STEPS
  foo <= ...
  bar <= ...
  (<< 5))

(LET foo<< :: (IMPLICIT a
                (-> a Foo))
  | a
  : ...)

(LET <<foo :: (IMPLICIT a
                (-> Foo a))
  | a
  : ...)

(LET foo :: (-> (-> Integer Integer Integer) Integer)
  (-> a (a 1 2)))

(LOCAL
  a <= 1
  (+ a 2))

(LOCAL
  a <= 1
  b <= 2
  (+ a b))

(LOCAL
  a
  <= (+ 1 2)

  b
  <= (+ 2 3)

  (+ a b))


(REWRITE-RULE LOOP
  | ~name ~@args ~body
  : &(LOCAL
       (RECURSIVE
         (LET ~name
           | ~@(transform args
                 | ~n <= ~_
                 : n)
           : ~body))
       (~name ~@(transform args
                  | ~_ <= ~v
                  : v))))

(LOOP loop
  a <= 1
  b <= 2
  (IF (< a 10)
    (loop (+ a 1) (+ b 1))
    (+ a b)))

(LOCAL
  (RECURSIVE
    (LET loop
      | a b
      : (IF (< a 10)
          (loop (+ a 1) (+ b 1))
          (+ a b))))
  (loop 1 2))


(LET foo :: (-> (-> Integer Integer Integer) Integer)
  | a
  : (a 1 2))

(LET foo :: (-> Text Text)
  | a
  : a)

(LET bar :: (-> Integer Integer)
  | 1
  : 2

  | a
  : (+ (bar 1) a))


(REWRITE-RULE QUX
  | ~@a
  : &(+ ~@a))


(REWRITE-RULE ALIAS
  | ~n <= ~v
  : &(REWRITE-RULE ~n
       |
       : &~~v))

(ALIAS FOO <= (+ 5 10 20))


(REWRITE-RULE STEP-MATCH
  | ~value ~@matches
  : (LOCAL
      a <= (UNIQUE-SYMBOL)
      &(STEPS
         ~a <= ~value
         (MATCH ~a
           ~@matches))))

(STEP-MATCH foo
  | *none
  : 1

  | (*some a)
  : 2)


(RECURSIVE
  (LET even? :: (-> Integer Boolean)
    | 0
    : true

    | a
    : (odd? (- a 1)))

  (LET odd? :: (-> Integer Boolean)
    | 0
    : false

    | a
    : (even? (- a 1))))

(RECURSIVE
  (PROTOCOL (Foo a)
    foo :: (-> %(Bar a) a a))

  (PROTOCOL (Bar a)
    bar :: (-> (%Foo a) a a)))

(RECURSIVE
  (TYPE Foo
    (*foo Bar))

  (TYPE Bar
    (*bar Foo)))

(RECURSIVE
  (REWRITE-RULE FOO
    | ~n <= ~v
    : &(BAR ~n ~v)

    | ~v
    : &(BAR ~v))

  (REWRITE-RULE BAR
    | ~a ~@b
    : (MATCH a
        | &~n <= ~v
        : &(QUX ~n ~v ~@b)

        | v
        : &(QUX 1 ~v ~@b))))

(foo -> a b (+ a b))
(foo (-> a b (+ a b)))
(foo (echo -> a b (+ a b)))
(foo (ECHO -> a b (+ a b)))

(RECURSIVE
  (REWRITE-RULE UNSTREAM
    | (STREAM ~a)
    : a

    | ~a
    : &(unstream ~a))

  (REWRITE-RULE STREAM
    | (UNSTREAM ~a)
    : a

    | ~a
    : &(stream ~a)))

(STEPS
  a <= a
  b <= b
  c)

(STEPS
  x <= (read-file "foo")
  (log x)
  (write-file "bar" x)
  (<< null))

(step (read-file "foo") -> x
  (step (log x) -> *null
    (transform (write-file "bar" x) -> *null
      null)))

(TRANSFORM
  a <= 1
  b <= 2
  c <= 3
  (+ a b c))

(MATCH a b c
  | 1 2 3
  : 1

  | 1 2 a
  : 2

  | 1 a b
  : 3

  | a b c
  : 4)

[ 1 2 3 ]

[ 1
  2
  3 ]

(*foo { a b })

(*foo { a <= 1 b <= 2 })

(*foo { a <= 1
        b <= 2 })

(*foo
  { a <= 1
    b <= 2 })

(MATCH a
  | _
  : 1

  | a
  : 2

  | 1
  : 3

  | "foo"
  : 4

  | (*foo { a b c })
  : 5

  | (*foo { a <= b c <= d })
  : (*foo { b <= a d <= c })

  | (*foo 1)
  : 6)


(ATTRIBUTES INLINE (TARGET JAVASCRIPT) (PHASE COMPILE)
  ...)


(ASSERT (equal? (foo 1) bar)
  (+ 1 2))


(ASSERTIONS
  (equal? foo bar)

  (test (foo (bar qux))))


(PROTOCOL ($unsafe-execute-main a)
  unsafe-execute-main :: (-> a Null))


# Unsure

(ABSTRACT
  (TYPE (Foo a)
    *foo
    (*bar a)))

(TAG->LET *foo)

(PROVIDE { public }
  (TAG->LET *foo))

(PUBLIC-TAG->LET
  *foo)

(USE-PREFIX "package:flatten/module/flatten.nul"
  flatten-
  flatten-foo
  flatten-bar)


(foo @bar ...) # equivalent to (foo (bar ...))

(foo @bar @qux ...) # equivalent to (foo (bar (qux ...)))


(TYPE Foo :: (-> $a $b Type)
  (*foo $a))

(TYPE Rgb :: Type
  (*rgba Integer Integer Integer Number))

(ASSERTIONS
  (STEPS
    foo <= (read-file "foo")
    (<< (equal? foo bar))))

#/(ASSERTIONS
  (flatten
    (transform (read-file "foo") -> foo
      (<< (equal? foo bar)))))/#
