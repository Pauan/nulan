#! /usr/bin/env node
"use strict";

// http://stackoverflow.com/a/8808162/449477
var vm = require("vm")
var fs = require("fs")
function load(path, context) {
  var data = fs.readFileSync(path, "utf8")
  vm.runInThisContext(data, path)
}

global.require = require // TODO: a bit hacky, but it seems to work

load("./NULAN.parse.js")

load("./lib/NINO.compile.js")
load("./lib/NINO.transform.js")
load("./lib/NINO.partial.js")

load("./NULAN.js")

load("./lib/NUIT.serialize.js")

NULAN.readFile = function (s) {
  return fs.readFileSync(s, "utf8")
}

/*NULAN.vars["prn"]     = "prn"
NULAN.values["prn"]   = prn*/


//NULAN.from("Node.js").to("browser")
//NULAN.from("Node.js").to("Chrome Extension")
NULAN.from("Node.js").to("Node.js")


var args = require("optimist").argv

if (args.d) {
  NULAN.options.debug = true
}

/*
var args = process.argv.slice(2).filter(function (x) {
  // TODO: better cli parsing
  if (x === "-d") {
    NULAN.options.debug = true
    return false
  } else {
    return true
  }
})*/


try {
  NULAN.import("NULAN.macros")
} catch (e) {
  console.error("" + e)
}


var globals = { Array:      Array
              , console:    console
              /*, require:    require
              , "_38_src":  process.argv[1]
              , "_38_args": args */}

// TODO
NULAN.builtin({ "require": require
              , "&src":    process.argv[1]
              , "&args":   args })

/*NULAN.vars["require"] = "require"
NULAN.vars["&src"]    = "&src"
NULAN.vars["&args"]   = "&args"*/


var util = require("util")

var rl = require("./lib/cli").create({
  completer: function (s) {
    var a = Object.keys(NULAN.vars).filter(function (s2) {
      return s2.indexOf(s) === 0
    }).sort(function (l, r) {
      if (l[0] === "&" && r[0] !== "&") {
        return 1
      } else if (l[0] !== "&" && r[0] === "&") {
        return -1
      } else {
        return l.localeCompare(r)
        //return l < r ? -1 : l > r ? 1 : 0
      }
    })
    return [a, s]
  }
})

function print(a) {
  console.log(NUIT.serialize([a], { multiline: true }))
}

function pretty(x) {
  return util.inspect(x, false, null, false)
}

function printTokens(a) {
  return a.map(function (x) {
    x = x.name
    if (x instanceof NULAN.Box) {
      return x.value
    } else {
      return x
    }
  }).join(" ")
}

rl.on("input", function (s) {
  try {
    var x = NULAN.tokenize(s)
       // TODO
    if (false) {
      print(["tokenize", printTokens(x)])
      console.log()
    }

    NULAN.parseRaw(x, function (x) {
      if (NULAN.options.debug) {
        print(["parse", pretty(NULAN.toJSON(x))])
        //print(["parse"].concat(NULAN.toJSON(x).map(pretty)))
        console.log()
      }

      x = NULAN.compile(x)
      if (NULAN.options.debug) {
        print(["compile", x])
        console.log()
      }

      //console.log("@compile\n" + x.replace(/^/gm, "  "))

      x = vm.runInNewContext(x, globals)
      if (NULAN.options.debug) {
        print(["eval", pretty(x)])
      } else {
        console.log(pretty(x))
      }
    })
    //console.log("@eval\n" + ("" + x).replace(/^/gm, "  "))
  } catch (e) {
    console.error("" + e)
  }

  console.log()
})

/*
var stdin = process.openStdin()

process.stdout.write("> ")

stdin.addListener("data", function (s) {
  //process.stdout.write("\u001B[J")

  s = ("" + s).replace(/\n$/, "")
  //var lines = s.split(/\n/).length
  try {
    var x = NULAN.compile(s)
    //lines += x.split(/\n/).length
    console.log(x)

    x = "" + vm.runInNewContext(x, globals)
    //lines += x.split(/\n/).length
    console.log(x)
  } catch (e) {
    console.error(e)
    //++lines
  } finally {
    console.log()
    //process.stdout.write("\u001B[" + lines + "A")
    //process.stdout.write("\u001B[2K")
    process.stdout.write("> ")
  }
})

stdin.addListener("end", function () {
  //process.stdout.write("\u001B[" + 1 + "A")
  //process.stdout.write("\u001B[2K")
  console.log()
})
*/

/*
;[ "(var foo 1)",
  "(+ foo 2)",
  "(var foo 2)",
  "(+ foo 3)",
  "(&eval (+ 3 5))",
  "(&eval +)",
  "(set! foo 5)",
  "(&eval (var + (fn)))",
  "(&eval +)",
  "(&eval (var foo (fn)))",
  "(&eval foo)",
  "+",
  "(& +)",
  "(& (+ 1 2))",

  "(namespace bar)",
  "(var foo 5)",
  "(+ foo 10)",
  "(var foo 10)",
  "(+ foo 20)",
  "(w/namespace bar (var foo 20) (+ foo 30) (var foo 30) (+ foo 40))",
  "(+ foo 20)",
  "(let foo 30)",
  "(+ foo 20)",
  "(var foo 30)",
  "(let! foo 50)",
  // "(prn +)",
].forEach(function (s) {
  console.log()

  var x = NULAN.compile(s)
  console.log(x)

  //console.log(NULAN.eval(x))
})

console.log()
*/
