#! /usr/bin/env node
"use strict";

// http://stackoverflow.com/a/8808162/449477
var vm = require("vm")
var fs = require("fs")
function load(path, context) {
  var data = fs.readFileSync(path, "utf8")
  vm.runInThisContext(data, path)
}

load("./lib/NINO.compile.js")
load("./lib/NINO.transform.js")
load("./NULAN.js")

load("./lib/PARSE.js")
load("./NULAN.parse.js")

load("./lib/NUIT.serialize.js")

NULAN.readFile = function (s) {
  return fs.readFileSync(s, "utf8")
}

NULAN.import("NULAN.macros")


var globals = { require: require }

NULAN.vars["require"] = "require"


var util = require("util")

var rl = require("./lib/cli").create({
  completer: function (s) {
    var a = Object.keys(NULAN.vars).filter(function (s2) {
      return s2.indexOf(s) === 0
    }).sort(function (l, r) {
      if (l[0] === "&" && r[0] !== "&") {
        return 1
      } else if (l[0] !== "&" && r[0] === "&") {
        return -1
      } else {
        return l.localeCompare(r)
        //return l < r ? -1 : l > r ? 1 : 0
      }
    })
    return [a, s]
  }
})

function print(a) {
  console.log(NUIT.serialize([a], { multiline: true }))
}

function pretty(x) {
  return util.inspect(x, false, null, false)
}

// TODO: move into NULAN.js
function transform(a) {
  if (Array.isArray(a)) {
    return a.map(transform)
  } else if (a instanceof NULAN.Symbol || a instanceof NULAN.Bypass) {
    return a.value
  } else if (typeof a === "string") {
    return "\"" + a + "\"" // TODO replace " inside the string with \"
  } else {
    return a
  }
}

rl.on("input", function (s) {
  try {
    console.log()
    var x = NULAN.parse(s)
    print(["parse"].concat(transform(x).map(pretty)))

    console.log()
    x = NULAN.compile(x)
    print(["compile", x])

    //console.log("@compile\n" + x.replace(/^/gm, "  "))

    console.log()
    x = vm.runInNewContext(x, globals)
    print(["eval", pretty(x)])
    //console.log(pretty(x))

    //console.log("@eval\n" + ("" + x).replace(/^/gm, "  "))
  } catch (e) {
    console.error("" + e)
  }

  console.log()
})

/*
var stdin = process.openStdin()

process.stdout.write("> ")

stdin.addListener("data", function (s) {
  //process.stdout.write("\u001B[J")

  s = ("" + s).replace(/\n$/, "")
  //var lines = s.split(/\n/).length
  try {
    var x = NULAN.compile(s)
    //lines += x.split(/\n/).length
    console.log(x)

    x = "" + vm.runInNewContext(x, globals)
    //lines += x.split(/\n/).length
    console.log(x)
  } catch (e) {
    console.error(e)
    //++lines
  } finally {
    console.log()
    //process.stdout.write("\u001B[" + lines + "A")
    //process.stdout.write("\u001B[2K")
    process.stdout.write("> ")
  }
})

stdin.addListener("end", function () {
  //process.stdout.write("\u001B[" + 1 + "A")
  //process.stdout.write("\u001B[2K")
  console.log()
})
*/

/*
;[ "(var foo 1)",
  "(+ foo 2)",
  "(var foo 2)",
  "(+ foo 3)",
  "(&eval (+ 3 5))",
  "(&eval +)",
  "(set! foo 5)",
  "(&eval (var + (fn)))",
  "(&eval +)",
  "(&eval (var foo (fn)))",
  "(&eval foo)",
  "+",
  "(& +)",
  "(& (+ 1 2))",

  "(namespace bar)",
  "(var foo 5)",
  "(+ foo 10)",
  "(var foo 10)",
  "(+ foo 20)",
  "(w/namespace bar (var foo 20) (+ foo 30) (var foo 30) (+ foo 40))",
  "(+ foo 20)",
  "(let foo 30)",
  "(+ foo 20)",
  "(var foo 30)",
  "(let! foo 50)",
  // "(prn +)",
].forEach(function (s) {
  console.log()

  var x = NULAN.compile(s)
  console.log(x)

  //console.log(NULAN.eval(x))
})

console.log()
*/
