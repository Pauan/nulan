#! /usr/bin/env node
var $$jscomp$scope$id$$ = 0;
function $util$Symbol$$($s$$3$$) {
  return null == $s$$3$$ ? "Symbol(" + ++$$jscomp$scope$id$$ + ")" : 'Symbol("' + $s$$3$$ + '", ' + ++$$jscomp$scope$id$$ + ")";
}
;function $util$log$assert$$($x$$1$$) {
  if (!$x$$1$$) {
    throw console.log(Error("Assertion failed").stack), 42;
  }
}
var $util$log$log$$ = function() {
}.bind.call(console.log, console);
function $util$array$join$$($a$$2$$) {
  return[].join.call($a$$2$$, "");
}
function $util$array$len$$($a$$6$$) {
  return $a$$6$$.length;
}
function $util$array$push$$($a$$8$$, $x$$11$$) {
  [].push.call($a$$8$$, $x$$11$$);
}
function $util$array$slice$$($a$$10$$, $start$$, $end$$) {
  return[].slice.call($a$$10$$, $start$$, $end$$);
}
function $util$array$each$$($a$$17$$, $f$$7$$) {
  for (var $i$$8$$ = 0, $iLen$$3$$ = $util$array$len$$($a$$17$$);$i$$8$$ < $iLen$$3$$;++$i$$8$$) {
    $f$$7$$($a$$17$$[$i$$8$$], $i$$8$$);
  }
}
function $util$array$concat$$($var_args$$) {
  var $r$$1$$ = [];
  $util$array$each$$(arguments, function($x$$16$$) {
    $util$array$each$$($x$$16$$, function($x$$17$$) {
      $util$array$push$$($r$$1$$, $x$$17$$);
    });
  });
  return $r$$1$$;
}
;var $$jscomp$scope$top$$ = /(?:)/;
var $util$stream$end$$ = {}, $$jscomp$scope$sentinel$$ = {};
function $util$stream$make$$($f$$14$$) {
  var $old$$ = $$jscomp$scope$sentinel$$;
  return{$peek$:function() {
    $util$log$assert$$($old$$ !== $$jscomp$scope$sentinel$$);
    return $old$$;
  }, $read$:function() {
    $util$log$assert$$($old$$ !== $$jscomp$scope$sentinel$$);
    $old$$ = $f$$14$$();
  }, $has$:function() {
    $old$$ === $$jscomp$scope$sentinel$$ && ($old$$ = $f$$14$$());
    return $old$$ !== $util$stream$end$$;
  }};
}
function $util$stream$fromArray$$($a$$27$$) {
  var $i$$15$$ = 0, $len$$ = $util$array$len$$($a$$27$$);
  return $util$stream$make$$(function() {
    return $i$$15$$ < $len$$ ? $a$$27$$[$i$$15$$++] : $util$stream$end$$;
  });
}
;function $$jscomp$scope$toBuffer$$($a$$28$$, $filename$$) {
  var $line$$ = 1, $column$$ = 0;
  return $util$stream$make$$(function() {
    if ($a$$28$$.$has$()) {
      var $s$$13$$ = $a$$28$$.$peek$();
      $a$$28$$.$read$();
      var $start$$1$$ = {$line$:$line$$, $column$:$column$$};
      "\n" === $s$$13$$ ? ($line$$ = $start$$1$$.$line$ + 1, $column$$ = 0) : ($line$$ = $start$$1$$.$line$, $column$$ = $start$$1$$.$column$ + 1);
      return{$value$:$s$$13$$, $loc$:{$source$:$filename$$, $start$:$start$$1$$, $end$:{$line$:$line$$, $column$:$column$$}}};
    }
    return $util$stream$end$$;
  });
}
function $util$buffer$loc$$($x$$23$$, $y$$4$$) {
  return{$source$:null !== $x$$23$$.$source$ ? $x$$23$$.$source$ : $y$$4$$.$source$, $start$:$x$$23$$.$start$, $end$:$y$$4$$.$end$};
}
function $util$buffer$buffer$$($a$$29$$, $filename$$1$$) {
  null == $filename$$1$$ && ($filename$$1$$ = null);
  return $$jscomp$scope$toBuffer$$($util$stream$fromArray$$($a$$29$$), $filename$$1$$);
}
function $util$buffer$Error$$($o$$2$$, $s$$14$$) {
  var $a$$30$$ = [$s$$14$$];
  if (null != $o$$2$$) {
    var $b1$$ = null !== $o$$2$$.$source$, $b2$$ = null != $o$$2$$.$start$.$line$, $b3$$ = null != $o$$2$$.$start$.$column$;
    if ($b1$$ || $b2$$ || $b3$$) {
      $util$array$push$$($a$$30$$, "  ("), $b1$$ && ($util$array$push$$($a$$30$$, $o$$2$$.$source$), $b2$$ && $util$array$push$$($a$$30$$, ":")), $b2$$ && ($util$array$push$$($a$$30$$, $o$$2$$.$start$.$line$), $b3$$ && ($util$array$push$$($a$$30$$, ":"), $util$array$push$$($a$$30$$, $o$$2$$.$start$.$column$))), $util$array$push$$($a$$30$$, ")");
    }
  }
  "function" === typeof Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);
  this.originalMessage = $s$$14$$;
  this.message = $util$array$join$$($a$$30$$);
}
$util$buffer$Error$$.prototype = Error();
$util$buffer$Error$$.prototype.name = "Error";
function $$jscomp$scope$delimiter$$($s$$15$$, $f$$15$$) {
  $$jscomp$scope$rules$$[$s$$15$$] = {$delimiter$:!0, $tokenize$:$f$$15$$};
}
function $$jscomp$scope$tokenizeComment1$$($token$$1$$, $a$$33$$) {
  for (;;) {
    if ($a$$33$$.$has$()) {
      var $x$$25$$ = $a$$33$$.$peek$();
      $a$$33$$.$read$();
      if ($a$$33$$.$has$()) {
        var $y$$5$$ = $a$$33$$.$peek$();
        if ("|" === $x$$25$$.$value$ && "#" === $y$$5$$.$value$) {
          $a$$33$$.$read$();
          break;
        } else {
          "#" === $x$$25$$.$value$ && "|" === $y$$5$$.$value$ && ($a$$33$$.$read$(), $$jscomp$scope$tokenizeComment1$$($x$$25$$, $a$$33$$));
        }
      } else {
        throw new $util$buffer$Error$$($token$$1$$.$loc$, "missing ending |#");
      }
    } else {
      throw new $util$buffer$Error$$($token$$1$$.$loc$, "missing ending |#");
    }
  }
}
function $$jscomp$scope$tokenizeWhitespace$$() {
  return[];
}
function $$jscomp$scope$isDelimiter$$($s$$20$$) {
  return null != $$jscomp$scope$rules$$[$s$$20$$] && $$jscomp$scope$rules$$[$s$$20$$].$delimiter$;
}
function $$jscomp$scope$type$$($s$$21$$) {
  return function($x$$27$$, $loc$$) {
    null == $loc$$ && ($loc$$ = null);
    var $o$$3$$ = {};
    $o$$3$$[$nulan$tokenize$$0type$$] = $s$$21$$;
    $o$$3$$[$nulan$tokenize$$0value$$] = $x$$27$$;
    $o$$3$$[$nulan$tokenize$$0loc$$] = $loc$$;
    return $o$$3$$;
  };
}
var $nulan$tokenize$$0type$$ = $util$Symbol$$("type");
$util$Symbol$$("args");
var $nulan$tokenize$$0value$$ = $util$Symbol$$("value"), $nulan$tokenize$$0loc$$ = $util$Symbol$$("loc");
function $nulan$tokenize$loc$$($x$$28$$, $y$$6$$) {
  $util$log$assert$$($nulan$tokenize$$0loc$$ in $x$$28$$);
  $util$log$assert$$($nulan$tokenize$$0loc$$ in $y$$6$$);
  return $util$buffer$loc$$($x$$28$$[$nulan$tokenize$$0loc$$], $y$$6$$[$nulan$tokenize$$0loc$$]);
}
var $nulan$tokenize$sym$$ = $$jscomp$scope$type$$("sym"), $nulan$tokenize$num$$ = $$jscomp$scope$type$$("num"), $$jscomp$scope$rules$$ = {};
$$jscomp$scope$delimiter$$(" ", $$jscomp$scope$tokenizeWhitespace$$);
$$jscomp$scope$delimiter$$("\n", $$jscomp$scope$tokenizeWhitespace$$);
$$jscomp$scope$delimiter$$("#", function($token$$, $a$$32$$) {
  if ($a$$32$$.$has$()) {
    var $x$$24$$ = $a$$32$$.$peek$();
    if ("|" === $x$$24$$.$value$) {
      $a$$32$$.$read$(), $$jscomp$scope$tokenizeComment1$$($token$$, $a$$32$$);
    } else {
      for (;$a$$32$$.$has$() && ($x$$24$$ = $a$$32$$.$peek$(), $a$$32$$.$read$(), "\n" !== $x$$24$$.$value$);) {
      }
    }
  }
  return[];
});
$$jscomp$scope$delimiter$$('"', function($s$$18$$) {
  return function($token$$2$$, $a$$35$$) {
    for (var $top$$ = [], $l_r$$5$$ = [];;) {
      if ($a$$35$$.$has$()) {
        var $x$$26$$ = $a$$35$$.$peek$(), $c$$1$$ = $x$$26$$.$value$;
        $a$$35$$.$read$();
        if ($c$$1$$ === $s$$18$$) {
          return $util$array$len$$($l_r$$5$$) && $util$array$push$$($top$$, $util$array$join$$($l_r$$5$$)), $l_r$$5$$ = $util$buffer$loc$$($token$$2$$.$loc$, $x$$26$$.$loc$), $top$$.unshift($nulan$tokenize$sym$$($token$$2$$.$value$, $l_r$$5$$)), $util$array$push$$($top$$, $nulan$tokenize$sym$$($x$$26$$.$value$, $l_r$$5$$)), $top$$;
        }
        $util$array$push$$($l_r$$5$$, $c$$1$$);
      } else {
        throw new $util$buffer$Error$$($token$$2$$.$loc$, "missing ending " + $s$$18$$);
      }
    }
  };
}('"'));
$$jscomp$scope$delimiter$$(":");
$$jscomp$scope$delimiter$$(".");
$$jscomp$scope$delimiter$$("`");
$$jscomp$scope$delimiter$$(",");
$$jscomp$scope$delimiter$$("@");
$$jscomp$scope$delimiter$$("(");
$$jscomp$scope$delimiter$$(")");
$$jscomp$scope$delimiter$$("[");
$$jscomp$scope$delimiter$$("]");
$$jscomp$scope$delimiter$$("{");
$$jscomp$scope$delimiter$$("}");
function $$jscomp$scope$ender$$($l$$1$$, $s$$22$$, $r$$7$$) {
  var $a$$38$$ = $util$array$concat$$([$s$$22$$], $r$$7$$[0]);
  $nulan$parse$setLoc$$($a$$38$$, $s$$22$$);
  return $util$array$concat$$($l$$1$$, [$a$$38$$], $util$array$slice$$($r$$7$$, 1));
}
function $$jscomp$scope$unary$$($s$$25$$) {
  $$jscomp$scope$rules$01$$[$s$$25$$] = {$associativity$:"right", $parse$:function $$$jscomp$scope$rules$01$$$$s$$25$$$$parse$$($l$$3$$, $s$$26$$, $r$$9$$) {
    $$jscomp$scope$missingRight$$($r$$9$$, $s$$26$$);
    var $y$$8$$ = $r$$9$$[0], $a$$40$$ = [$s$$26$$, $y$$8$$];
    $a$$40$$[$nulan$tokenize$$0loc$$] = $nulan$tokenize$loc$$($s$$26$$, $y$$8$$);
    return $util$array$concat$$($l$$3$$, [$a$$40$$], $util$array$slice$$($r$$9$$, 1));
  }};
}
function $$jscomp$scope$missingRight$$($r$$10$$, $s$$27$$) {
  0 === $util$array$len$$($r$$10$$) && $nulan$output$error$$($s$$27$$, "missing expression to the right of " + $s$$27$$);
}
function $$jscomp$scope$braces$$($left$$, $right$$, $f$$16$$) {
  $$jscomp$scope$rules$01$$[$left$$] = {$endAt$:$right$$, $parse$:$f$$16$$};
  $$jscomp$scope$rules$01$$[$right$$] = {$startAt$:$left$$};
}
function $$jscomp$scope$parse1$$($a$$41$$, $pri$$, $end$$2$$) {
  for (var $l$$5$$ = [];$a$$41$$.$has$();) {
    var $s$$inline_4_x$$32$$ = $a$$41$$.$peek$();
    if (null !== $end$$2$$ && "sym" === $s$$inline_4_x$$32$$[$nulan$tokenize$$0type$$] && $s$$inline_4_x$$32$$[$nulan$tokenize$$0value$$] === $end$$2$$) {
      break;
    } else {
      if ("sym" === $s$$inline_4_x$$32$$[$nulan$tokenize$$0type$$]) {
        var $y$$9$$ = $$jscomp$scope$rules$01$$[$s$$inline_4_x$$32$$[$nulan$tokenize$$0value$$]];
        if (null != $y$$9$$) {
          null != $y$$9$$.$startAt$ && (null === $end$$2$$ ? $nulan$output$error$$($s$$inline_4_x$$32$$, "missing starting " + $y$$9$$.$startAt$) : $nulan$output$error$$($s$$inline_4_x$$32$$, "expected " + $end$$2$$ + " but got " + $s$$inline_4_x$$32$$));
          null == $y$$9$$.$parse$ && $nulan$output$error$$($s$$inline_4_x$$32$$, $s$$inline_4_x$$32$$ + " has a syntax rule but doesn't have a parse function");
          var $pri2$$ = $y$$9$$.$priority$;
          null == $pri2$$ && ($pri2$$ = 0);
          if (null === $pri$$ || $pri2$$ > $pri$$) {
            "right" === $y$$9$$.$associativity$ && --$pri2$$;
            $a$$41$$.$read$();
            var $r$$11$$ = [];
            if (null != $y$$9$$.$endAt$) {
              a: {
                for (var $loc$$inline_22_top$$inline_2$$ = $r$$11$$, $a$$inline_3_o$$inline_23$$ = $a$$41$$, $endAt$$inline_5$$ = $y$$9$$.$endAt$, $r$$inline_6$$ = [];;) {
                  if ($a$$inline_3_o$$inline_23$$.$has$()) {
                    var $x$$inline_7$$ = $a$$inline_3_o$$inline_23$$.$peek$();
                    if ("sym" === $x$$inline_7$$[$nulan$tokenize$$0type$$] && $x$$inline_7$$[$nulan$tokenize$$0value$$] === $endAt$$inline_5$$) {
                      $a$$inline_3_o$$inline_23$$.$read$();
                      $util$array$push$$($loc$$inline_22_top$$inline_2$$, $r$$inline_6$$);
                      $loc$$inline_22_top$$inline_2$$ = $nulan$tokenize$loc$$($s$$inline_4_x$$32$$, $x$$inline_7$$);
                      $a$$inline_3_o$$inline_23$$ = Object.create($s$$inline_4_x$$32$$);
                      null != $loc$$inline_22_top$$inline_2$$ && ($a$$inline_3_o$$inline_23$$[$nulan$tokenize$$0loc$$] = $loc$$inline_22_top$$inline_2$$);
                      $s$$inline_4_x$$32$$ = $a$$inline_3_o$$inline_23$$;
                      break a;
                    }
                    $r$$inline_6$$ = $util$array$concat$$($r$$inline_6$$, $$jscomp$scope$parse1$$($a$$inline_3_o$$inline_23$$, null, $endAt$$inline_5$$));
                  } else {
                    $nulan$output$error$$($s$$inline_4_x$$32$$, "missing ending " + $endAt$$inline_5$$);
                  }
                }
                $s$$inline_4_x$$32$$ = void 0;
              }
            }
            $r$$11$$ = $util$array$concat$$($r$$11$$, $$jscomp$scope$parse1$$($a$$41$$, $pri2$$, $end$$2$$));
            $l$$5$$ = $y$$9$$.$parse$($l$$5$$, $s$$inline_4_x$$32$$, $r$$11$$);
          } else {
            break;
          }
        } else {
          $util$array$push$$($l$$5$$, $s$$inline_4_x$$32$$), $a$$41$$.$read$();
        }
      } else {
        $util$array$push$$($l$$5$$, $s$$inline_4_x$$32$$), $a$$41$$.$read$();
      }
    }
  }
  return $l$$5$$;
}
var $$jscomp$scope$rules$01$$ = {};
function $nulan$parse$setLoc$$($x$$35$$, $y$$10$$) {
  $util$log$assert$$($nulan$tokenize$$0loc$$ in $y$$10$$);
  $x$$35$$[$nulan$tokenize$$0loc$$] = $y$$10$$[$nulan$tokenize$$0loc$$];
}
$$jscomp$scope$braces$$("(", ")", function($l$$6$$, $s$$30$$, $r$$13$$) {
  var $a$$43$$ = $r$$13$$[0];
  $nulan$parse$setLoc$$($a$$43$$, $s$$30$$);
  return $util$array$concat$$($l$$6$$, [$a$$43$$], $util$array$slice$$($r$$13$$, 1));
});
$$jscomp$scope$braces$$("[", "]", $$jscomp$scope$ender$$);
$$jscomp$scope$braces$$("{", "}", $$jscomp$scope$ender$$);
$$jscomp$scope$rules$01$$['"'] = {$priority$:Infinity, $endAt$:'"', $parse$:$$jscomp$scope$ender$$};
$$jscomp$scope$unary$$("`");
$$jscomp$scope$unary$$(",");
$$jscomp$scope$unary$$("@");
(function($s$$23$$) {
  $$jscomp$scope$rules$01$$[$s$$23$$] = {$parse$:function $$$jscomp$scope$rules$01$$$$s$$23$$$$parse$$($l$$2$$, $a$$39_s$$24$$, $r$$8$$) {
    0 === $util$array$len$$($l$$2$$) && $nulan$output$error$$($a$$39_s$$24$$, "missing expression to the left of " + $a$$39_s$$24$$);
    $$jscomp$scope$missingRight$$($r$$8$$, $a$$39_s$$24$$);
    var $x$$31$$ = $l$$2$$[$util$array$len$$($l$$2$$) - 1], $y$$7$$ = $r$$8$$[0];
    $a$$39_s$$24$$ = [$a$$39_s$$24$$, $x$$31$$, $y$$7$$];
    $a$$39_s$$24$$[$nulan$tokenize$$0loc$$] = $nulan$tokenize$loc$$($x$$31$$, $y$$7$$);
    return $util$array$concat$$($util$array$slice$$($l$$2$$, 0, -1), [$a$$39_s$$24$$], $util$array$slice$$($r$$8$$, 1));
  }};
})("=");
$$jscomp$scope$rules$01$$["->"] = {$associativity$:"right", $parse$:function $$$jscomp$scope$rules$01$$$__1$$parse$$($l$$7$$, $s$$31$$, $a$$44_r$$14$$) {
  $$jscomp$scope$missingRight$$($a$$44_r$$14$$, $s$$31$$);
  var $args$$ = $util$array$slice$$($a$$44_r$$14$$, 0, -1);
  $a$$44_r$$14$$ = [$s$$31$$, $args$$, $a$$44_r$$14$$[$util$array$len$$($a$$44_r$$14$$) - 1]];
  $nulan$parse$setLoc$$($a$$44_r$$14$$, $s$$31$$);
  return $util$array$concat$$($l$$7$$, [$a$$44_r$$14$$]);
}};
function $nulan$output$error$$($o$$5$$, $s$$32$$) {
  throw new $util$buffer$Error$$($o$$5$$.$loc$, $s$$32$$);
}
;var $o$$inline_18$$ = $$jscomp$scope$parse1$$(function($x$$30$$, $filename$$2$$) {
  var $a$$37$$ = $util$buffer$buffer$$($x$$30$$, $filename$$2$$), $state$$ = [];
  return $util$stream$make$$(function() {
    for (;;) {
      if ($util$array$len$$($state$$)) {
        return $state$$.shift();
      }
      if ($a$$37$$.$has$()) {
        var $a$$inline_12_a$$inline_26$$ = $a$$37$$, $JSCompiler_temp$$20_s$$inline_13_s$$inline_25$$ = $a$$inline_12_a$$inline_26$$.$peek$(), $c$$inline_14_r$$inline_27$$ = $JSCompiler_temp$$20_s$$inline_13_s$$inline_25$$.$value$;
        $a$$inline_12_a$$inline_26$$.$read$();
        if (null != $$jscomp$scope$rules$$[$c$$inline_14_r$$inline_27$$] && null != $$jscomp$scope$rules$$[$c$$inline_14_r$$inline_27$$].$tokenize$) {
          $JSCompiler_temp$$20_s$$inline_13_s$$inline_25$$ = $$jscomp$scope$rules$$[$c$$inline_14_r$$inline_27$$].$tokenize$($JSCompiler_temp$$20_s$$inline_13_s$$inline_25$$, $a$$inline_12_a$$inline_26$$);
        } else {
          var $c$$inline_14_r$$inline_27$$ = [$JSCompiler_temp$$20_s$$inline_13_s$$inline_25$$.$value$], $posFirst$$inline_28$$ = $JSCompiler_temp$$20_s$$inline_13_s$$inline_25$$.$loc$, $posLast$$inline_29$$ = $posFirst$$inline_28$$;
          if (!$$jscomp$scope$isDelimiter$$($JSCompiler_temp$$20_s$$inline_13_s$$inline_25$$.$value$)) {
            for (;$a$$inline_12_a$$inline_26$$.$has$() && ($JSCompiler_temp$$20_s$$inline_13_s$$inline_25$$ = $a$$inline_12_a$$inline_26$$.$peek$(), !$$jscomp$scope$isDelimiter$$($JSCompiler_temp$$20_s$$inline_13_s$$inline_25$$.$value$));) {
              $util$array$push$$($c$$inline_14_r$$inline_27$$, $JSCompiler_temp$$20_s$$inline_13_s$$inline_25$$.$value$), $posLast$$inline_29$$ = $JSCompiler_temp$$20_s$$inline_13_s$$inline_25$$.$loc$, $a$$inline_12_a$$inline_26$$.$read$();
            }
          }
          $c$$inline_14_r$$inline_27$$ = $util$array$join$$($c$$inline_14_r$$inline_27$$);
          $JSCompiler_temp$$20_s$$inline_13_s$$inline_25$$ = $$jscomp$scope$top$$.test.call(/^[0-9]+$/, $c$$inline_14_r$$inline_27$$) ? $nulan$tokenize$num$$(+$c$$inline_14_r$$inline_27$$, $util$buffer$loc$$($posFirst$$inline_28$$, $posLast$$inline_29$$)) : $nulan$tokenize$sym$$($c$$inline_14_r$$inline_27$$, $util$buffer$loc$$($posFirst$$inline_28$$, $posLast$$inline_29$$));
          $JSCompiler_temp$$20_s$$inline_13_s$$inline_25$$ = [$JSCompiler_temp$$20_s$$inline_13_s$$inline_25$$];
        }
        $state$$ = $JSCompiler_temp$$20_s$$inline_13_s$$inline_25$$;
      } else {
        return $util$stream$end$$;
      }
    }
  });
}('("foo")', "foo.nul"), null, null);
$util$log$log$$(require("util").inspect($o$$inline_18$$, {depth:null, colors:!0}));

