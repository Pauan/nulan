#! /usr/bin/env node
"use strict";

//global.require = require

// http://stackoverflow.com/a/8808162/449477
var vm = require("vm")
var fs = require("fs")
function load(path, context) {
  var data = fs.readFileSync(path, "utf8")
  vm.runInThisContext(data, path)
}

//global.require = require // TODO: a bit hacky, but it seems to work

load("./NULAN.parse.js")

load("./lib/NINO.compile.js")
load("./lib/NINO.transform.js")
load("./lib/NINO.partial.js")

load("./NULAN.js")

load("./lib/NUIT.serialize.js")

NULAN.readFile = function (s) {
  return fs.readFileSync(s, "utf8")
}

/*NULAN.vars["prn"]     = "prn"
NULAN.values["prn"]   = prn*/


//NULAN.from("Node.js").to("browser")
//NULAN.from("Node.js").to("Chrome Extension")


var opt  = require("optimist")
  , args = opt.argv

if (args.d) {
  NULAN.options.debug = true
}

/*
var args = process.argv.slice(2).filter(function (x) {
  // TODO: better cli parsing
  if (x === "-d") {
    NULAN.options.debug = true
    return false
  } else {
    return true
  }
})*/


NULAN.from("Node.js").to("Node.js")

try {
  NULAN.import("NULAN.macros")
  NULAN.import("modes/Node.js")
} catch (e) {
  console.error("" + e)
}


//var globals = {}

/*NULAN.vars["require"] = "require"
NULAN.vars["&src"]    = "&src"
NULAN.vars["&args"]   = "&args"*/

function print(a) {
  console.log(NUIT.serialize([a], { multiline: true }))
}

function pretty(x) {
  return util.inspect(x, false, null, false)
}

function printTokens(a) {
  return a.map(function (x) {
    x = x.name
    if (x instanceof NULAN.Box) {
      return x.value
    } else {
      return x
    }
  }).join(" ")
}


// https://github.com/joyent/node/blob/master/lib/repl.js#L
// TODO: include NULAN, NINO, and NUIT, or get rid of them in the context
function newContext() {
  var x = vm.createContext()
  for (var s in global) {
    x[s] = global[s]
  }
  x.global = x
  x.global.global = x

  x.console = console //new Console(this.outputStream)
  x.module  = module
  x.require = require
  return x
}

function evalFile(s, o) {
  NULAN.eval(fs.readFileSync(s, "utf8"), function (x) {
    vm.runInContext(x, o)
  })
}


var o = newContext()

// TODO: "nulan playlist -d 1 2 3" should not consume -d
if (args._.length) {
  var x = args._[0]
  // TODO: include the script's name
  process.argv = args._.slice(1).map(function (x) { return "" + x }) // TODO: a little hacky

  try {
    evalFile(x, o)
  } catch (e) {
    console.error("" + e)
  }
  /*args._.forEach(function (x) {
    evalFile(x, o)
  })*/
} else {
  var util = require("util")

  var rl = require("./lib/cli").create({
    completer: function (s) {
      var a = Object.keys(NULAN.vars).filter(function (s2) {
        return s2.indexOf(s) === 0
      }).sort(function (l, r) {
        if (l[0] === "&" && r[0] !== "&") {
          return 1
        } else if (l[0] !== "&" && r[0] === "&") {
          return -1
        } else {
          return l.localeCompare(r)
          //return l < r ? -1 : l > r ? 1 : 0
        }
      })
      return [a, s]
    }
  })

  rl.on("input", function (s) {
    try {
      var x = NULAN.tokenize(s)
         // TODO
      if (false) {
        print(["tokenize", printTokens(x)])
        console.log()
      }

      NULAN.parseRaw(x, function (x) {
        if (NULAN.options.debug) {
          print(["parse", pretty(NULAN.toJSON(x))])
          //print(["parse"].concat(NULAN.toJSON(x).map(pretty)))
          console.log()
        }

        x = NULAN.compile(x)
        if (NULAN.options.debug) {
          print(["compile", x])
          console.log()
        }

        //console.log("@compile\n" + x.replace(/^/gm, "  "))

        x = vm.runInContext(x, o)
        if (NULAN.options.debug) {
          print(["eval", pretty(x)])
        } else {
          console.log(pretty(x))
        }
      })
      //console.log("@eval\n" + ("" + x).replace(/^/gm, "  "))
    } catch (e) {
      if (NULAN.options.debug) {
        console.trace(e)
      } else {
        console.error("" + e)
      }
    }

    console.log()
  })
}
