#! /usr/bin/env node
"use strict";

// TODO: code duplication with nino.test
// TODO: code duplication with nulan


// http://stackoverflow.com/a/8808162/449477
var vm = require("vm")
var fs = require("fs")
function load(path, context) {
  var data = fs.readFileSync(path, "utf8")
  vm.runInThisContext(data, path)
}

load("./lib/nino.compile.js")
load("./01 nulan.js")
load("./lib/nuit.parse.js")
load("./lib/nuit.serialize.js")


// http://wiki.ecmascript.org/doku.php?id=harmony:egal
Object.is = function (x, y) {
  if (x === y) {
    // 0 === -0, but they are not identical
    return x !== 0 || 1 / x === 1 / y
  }

  // NaN !== NaN, but they are identical.
  // NaNs are the only non-reflexive value, i.e., if x !== x,
  // then x is a NaN.
  // isNaN is broken: it converts its argument to number, so
  // isNaN("foo") => true
  return x !== x && y !== y
}

Object.isObject = function (x) {
  var s = typeof x
  return x && (s === "object" || s === "function" || s === "xml")
}

Object.iso = function iso(x, y) {
  if (Object.is(x, y)) {
    return true
  } else if (Object.isObject(x) && Object.isObject(y)) {
    var s
    for (s in x) {
      if (!(s in y && iso(x[s], y[s]))) {
        return false
      }
    }
    for (s in y) {
      if (!(s in x)) {
        return false
      }
    }
    return true
  } else {
    return false
  }
}


function test(sFile, f) {
  fs.readFile(__dirname + "/tests/" + sFile, "utf8", function (err, s) {
    if (err) throw err
    NUIT.parse(s).forEach(function (a) {
      a.unshift(function (l, r) {
        if (!Object.iso(l, r)) {
          console.error(NUIT.serialize(["file", sFile,
                                         ["expected", r],
                                         ["got", l]]))
        }
      })
      f.apply(this, a)
    })
  })
}


var globals = {}
test("01 nulan.js", function (is, mode, expr, compiled, evaled) {
  if (mode === ">>>") {
    expr = NULAN.compile(expr)
    is(expr, compiled)

    expr = "" + vm.runInNewContext(expr, globals)
    is(expr, evaled)
  } else if (mode === ">>>c") {
    expr = NULAN.compile(expr)
    is(expr, compiled)
  } else if (mode === ">>>e") {
    expr = NULAN.compile(expr)
    expr = "" + vm.runInNewContext(expr, globals)
    is(expr, evaled)
  }
})
